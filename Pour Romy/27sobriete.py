import unittest # ajout de l'import par ZI




class Simplicite:
    def RLEit(chaine :str, iteration:int) -> str:
        if iteration != 1 :
            nvlchaine = Simplicite.RLE(chaine)
            return Simplicite.RLEit(nvlchaine,iteration-1)  #Pour la récursivité on enleve 1 jusqua que ce soit égale à 1
        return Simplicite.RLE(chaine)



    def unRLE(chaine : str)->str:
        nvlchaine = ""
        for i in range(0,len(chaine),2):
            nvlchaine = nvlchaine + int(chaine[i])*chaine[i+1]    
        return nvlchaine


    def unRLEit(chaine :str, iteration:int) -> str:
        if iteration != 1 :
            nvlchaine = Simplicite.unRLE(chaine)
            return Simplicite.unRLEit(nvlchaine,iteration-1) #Pour la récursivité on enleve 1 jusqua que ce soit égale à 1
        return Simplicite.unRLE(chaine)


class SimpliciteTest(unittest.TestCase): # ajout de la classe de test par ZI

    def test_RLE(self):
        self.assertEqual(Simplicite.RLE(""), "")
        self.assertEqual(Simplicite.RLE("abc"), "1a1b1c")
        self.assertEqual(Simplicite.RLE("abbccc"), "1a2b3c")
        self.assertEqual(Simplicite.RLE("aaabaa"), "3a1b2a")
        self.assertEqual(Simplicite.RLE("aAa"), "1a1A1a")
        self.assertEqual(Simplicite.RLE("WWWWWWWWWWWWW"), "9W4W")

    def test_RLE_recursive(self):
        try:
            self.assertEqual(Simplicite.RLE_recursif("", 1), "") # Test failed
            self.assertEqual(Simplicite.RLE_recursif("", 3), "") # Test failed

            self.assertEqual(Simplicite.RLE_recursif("abc", 1), "1a1b1c")
            self.assertEqual(Simplicite.RLE_recursif("abbccc", 1), "1a2b3c")
            self.assertEqual(Simplicite.RLE_recursif("aaabaa", 1), "3a1b2a")
            self.assertEqual(Simplicite.RLE_recursif("aAa", 1), "1a1A1a")

            self.assertEqual(Simplicite.RLE_recursif("abc", 2), "111a111b111c")
            self.assertEqual(Simplicite.RLE_recursif("abc", 3), "311a311b311c")

            saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
            self.assertEqual(Simplicite.RLE_recursif("SAE Algo", 20), saeIte20)
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def test_unRLE(self):
        try:
            self.assertEqual(Simplicite.unRLE(""), "")
            self.assertEqual(Simplicite.unRLE("1a1b1c"), "abc")
            self.assertEqual(Simplicite.unRLE("1a2b3c"), "abbccc")
            self.assertEqual(Simplicite.unRLE("3a1b2a"), "aaabaa")
            self.assertEqual(Simplicite.unRLE("1a1A1a"), "aAa")
            self.assertEqual(Simplicite.unRLE("9W4W"), "WWWWWWWWWWWWW")
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def test_unRLE_recursive(self):
        try:
            self.assertEqual(Simplicite.unRLE_recursif("", 1), "")
            self.assertEqual(Simplicite.unRLE_recursif("", 3), "")

            self.assertEqual(Simplicite.unRLE_recursif("1a1b1c", 1), "abc")
            self.assertEqual(Simplicite.unRLE_recursif("1a2b3c", 1), "abbccc")
            self.assertEqual(Simplicite.unRLE_recursif("3a1b2a", 1), "aaabaa")
            self.assertEqual(Simplicite.unRLE_recursif("1a1A1a", 1), "aAa")

            self.assertEqual(Simplicite.unRLE_recursif("111a111b111c", 2), "abc")
            self.assertEqual(Simplicite.unRLE_recursif("311a311b311c", 3), "abc")
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")

    def test_RLE_recursive_it50(self):
        try:
            resultat = ""
            self.assertEqual(0, 0)
        except Exception as e:
            self.fail(f"Unexpected exception: {e}")


if __name__ == '__main__':
    unittest.main()
    
# 2 tests failed